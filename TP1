1
void setup()
 {

pinMode(10,OUTPUT);// la led est placée en sortie sur la broche 10

}

void loop() {

digitalWrite(10,HIGH);//allumer la led
delay (1000);//attendre 1 seconde
digitalWrite(10,LOW);//éteindre la led
delay(1000);//attendre 1 seconde

}


2

void setup() {

pinMode(10,OUTPUT);// la led est placée en sortie sur la broche 10

}

void loop() {

analogWrite(10,63);//allumer la led à 25 pourcents
delay (2000);//attendre 2 seconde
analogWrite(10,125);//allumer la led à 50 pourcents
delay(2000);//attendre 2 seconde
analogWrite(10,191);//allumer la led à 75 pourcents
delay(2000);

3
void setup() {

pinMode(10,OUTPUT);// la led est placée en sortie sur la broche 10

}

void loop() {

analogWrite(10,63);//allumer la led à 25 pourcents
delay (2000);//attendre 2 seconde
digitalWrite(10,LOW);//éteindre la led
delay(1000);
analogWrite(10,125);//allumer la led à 50 pourcents
delay(2000);//attendre 2 seconde
digitalWrite(10,LOW);//éteindre la led
delay(1000);
analogWrite(10,191);//allumer la led à 75 pourcents
delay(2000);
digitalWrite(10,LOW);
delay(1000);


}
4-5
unsigned int PotentiometreValue;// La broche numérique 5 est reliée à la led. On lui donne le nom Led.

int Led = 10;// Déclaration variable IntensiteLed qui va servir à stocker une valeur au format int.
int IntensiteLed;


void setup() {
 
  pinMode(Led, OUTPUT); // Définit Led soit la broche numérique 10 comme sortie.
}

void loop() {
  // Lit la valeur de la broche analogique A2 et stock sa valeur dans PotentiometreValue.
  PotentiometreValue = analogRead(A2);
  // La valeur du PotentiometreValue Min = 0, Max = 1023 et mappée à Min = 0, Max = 255 puis est stockée dans IntensiteLed.
  IntensiteLed = map(PotentiometreValue, 0, 1023, 0, 255);
  // Met la broche numérique 5 (Led) à la valeur de IntensiteLed.
  analogWrite(Led, IntensiteLed);
  // attend 10 millisecondes.
  delay(10);
}

6-7
unsigned int PotentiometreValue;
// La broche numérique 5 est reliée à la led. On lui donne le nom Led.
int Led = 10;
// Déclaration variable IntensiteLed qui va servir à stocker une valeur au format int.
int IntensiteLed;
#define LDR A0
unsigned int value;


void setup() {
  // Définit Led soit la broche numérique 10 comme sortie.
 
  pinMode(Led, OUTPUT);
  pinMode(A0, INPUT);
  Serial.begin(9600);
}

void loop() {
value = analogRead(LDR);
   Serial.println(value);
  // Lit la valeur de la broche analogique A2 et stock sa valeur dans PotentiometreValue.
  PotentiometreValue= analogRead(A2);
  // La valeur du PotentiometreValue Min = 0, Max = 1023 et mappée à Min = 0, Max = 255 puis est stockée dans IntensiteLed.
  IntensiteLed = map(PotentiometreValue, 0, 1023, 0, 255);
  // Met la broche numérique 5 (Ledverte) à la valeur de IntensiteLed.
  analogWrite(Led, IntensiteLed);
  // attend 10 millisecondes.
  delay(10);
}

Exercice 2
1
#include <PID_v1.h>

#define PIN_INPUT A1//on définit la photorésistance en entrée analogique sur la broche A1
#define PIN_OUTPUT 11//on définit la LED en sortie sur la broche 11


double Setpoint, Input, Output;//on définit les différentes variables pour simplifier le code par la suite


double Kp=0, Ki=10, Kd=0;//on définit les différentes variables pour simplifier le code par la suite

PID myPID(&Input, &Output, &Setpoint, Kp, Ki, Kd, DIRECT);

void setup()
{
  //initialize the variables we're linked to
  Input = analogRead(PIN_INPUT);//on lit la valeur du potentiomètre
  Setpoint = 50;//on définit la sensibilité de la photorésistance

  //turn the PID on
  myPID.SetMode(AUTOMATIC);
}

void loop()
{
  Input = analogRead(PIN_INPUT);//on lit la veleur de la photorésistance et on l'applique à la led
  myPID.Compute();
  analogWrite(PIN_OUTPUT, Output);//on illumine la led en fonction de la valeur de la photorésistance
}

2
#include <PID_v1.h>

#define PIN_INPUT A1//on définit la photorésistance en entrée analogique sur la broche A1
#define PIN_OUTPUT 11//on définit la LED en sortie sur la broche 11
#define PIN_POT A0
unsigned int PotentiometreValue

double Setpoint, Input, Output;//on définit les différentes variables pour simplifier le code par la suite


double Kp=0, Ki=10, Kd=0;//on définit les différentes variables pour simplifier le code par la suite

PID myPID(&Input, &Output, &Setpoint, Kp, Ki, Kd, DIRECT);

void setup()
{
  //initialize the variables we're linked to
  Input = analogRead(PIN_INPUT);//on lit la valeur du potentiomètre

  //turn the PID on
  myPID.SetMode(AUTOMATIC);
}
void loop()
{
PotentiometreValue = analogRead(PIN_POT) 
PotentiometreValue = PotentiometreValue/4
  Setpoint = PotentiometreValue ;//on définit la sensibilité de la photorésistance
  Input = analogRead(PIN_INPUT);//on lit la veleur de la photorésistance et on l'applique à la led
  myPID.Compute();
  analogWrite(PIN_OUTPUT, Output);//on illumine la led en fonction de la valeur de la photorésistance
 }
3
#include <PID_v1.h>

#define PIN_INPUT 1//on définit la photorésistance en entrée analogique sur la broche A1
#define PIN_OUTPUT 11//on définit la LED en sortie sur la broche 11
#define PIN_POT 0

unsigned int PotentiometreValue;

double Setpoint, Input, Output;//on définit les différentes variables pour simplifier le code par la suite


double Kp=0, Ki=10, Kd=0;//on définit les différentes variables pour simplifier le code par la suite

PID myPID(&Input, &Output, &Setpoint, Kp, Ki, Kd, DIRECT);

void setup()
{
  //initialize the variables we're linked to
  Serial.begin(9600);
  Input = analogRead(PIN_INPUT);//on lit la valeur du potentiomètre

  //turn the PID on
  myPID.SetMode(AUTOMATIC);
}
void loop()
{
  Serial.println(PotentiometreValue);
  PotentiometreValue = analogRead(PIN_POT);//
  PotentiometreValue = PotentiometreValue/4;
  Setpoint = PotentiometreValue ;//on définit la sensibilité de la photorésistance
  Input = analogRead(PIN_INPUT);//on lit la veleur de la photorésistance et on l'applique à la led
  myPID.Compute();
  analogWrite(PIN_OUTPUT, Output);//on illumine la led en fonction de la valeur de la photorésistance
}
4
#include <PID_v1.h>
const int photores = A1; // entree photoresistance
const int pot = A0; // entree potentiometre
const int led = 11; // pin de la led
double lightLevel; // variable qui stocke le niveaue de lumiÃ¨re entrant

// parametres de rÃ©gulation
float Kp=0; // valeur initiale du gain proportionnel
float Ki=10; // valeur initiale du gain intÃ©gral
float Kd=0;  // valeur initiale du gain diffÃ©rentiel  

double Consigne, Entree, Sortie;  //Variables pour stocker les valeurs
PID myPID(&Entree, &Sortie, &Consigne, Kp, Ki, Kd, DIRECT);

const int sampleRate = 1; // Variable qui dÃ©termine la vitesse Ã  laquelle le PID tourne

// Parametrage de la communication
const long serialPing = 500; //Cela determine a quelle periode on ping la boucle (en ms)
unsigned long now = 0; //Cette variable sert Ã  compter le temps
unsigned long lastMessage = 0; //Cette variable permet de garder une trace de quand notre boucle a communique avec le port serie pour la derniere fois

void setup(){
  lightLevel = analogRead(photores); //Lire le niveau
  Entree = map(lightLevel, 0, 1024, 0, 255); //Changer les amplitudes
  Consigne = map(analogRead(pot), 0, 1024, 0, 255);  //Lire la consigne
  Serial.begin(9600); //Commencer une communication via le port serie
  myPID.SetMode(AUTOMATIC);  //Demarrer la regulation PID
  myPID.SetSampleTime(sampleRate); //Regle la periode d'echantillonnage
 
  Serial.println("Debut"); // On commence
  lastMessage = millis(); // Marque du temps
}

void loop(){
  Consigne = map(analogRead(pot), 0, 1024, 0, 255); //Lire la consigne
  lightLevel = analogRead(photores); //Obtenir le niveau lumineux
  Entree = map(lightLevel, 0, 900, 0, 255); //En deduire l'entree
  myPID.Compute();  //Faire tourner la boucle PID
  analogWrite(led, Sortie);  //Ecrire la sortie du PID comme entree MLI de la LED
 
  now = millis(); // Marque du temps
  if(now - lastMessage > serialPing) {  // A commenter !!!
	Serial.print("Consigne = ");
	Serial.print(Consigne);
	Serial.print(" Entree = ");
	Serial.print(Entree);
	Serial.print(" Sortie = ");
	Serial.print(Sortie);
	Serial.print("\n");
	if (Serial.available() > 0) { //Nous voulons mettre a jour Kp, Ki et Kd
  	for (int x = 0; x < 4; x++) {
    	switch (x) {
      	case 0:
        	Kp = Serial.parseFloat();  
        	break;
      	case 1:
        	Ki = Serial.parseFloat();
        	break;
      	case 2:
        	Kd = Serial.parseFloat();
        	break;
      	case 3:
        	for (int y = Serial.available(); y == 0; y--) {
          	Serial.read();  
        	}
        	break;
    	}
  	}
  	Serial.print(" Kp,Ki,Kd = ");
  	Serial.print(Kp);
  	Serial.print(",");
  	Serial.print(Ki);
  	Serial.print(",");
  	Serial.println(Kd);  //On affiche les valeurs pour verifier qu'elles ont bien ete mises a jour
  	myPID.SetTunings(Kp, Ki, Kd); //On regle les nouveaux parametres du PID et on relance la regulation
	}
    
	lastMessage = now;
	//Marque du temps.
  }
 
}


